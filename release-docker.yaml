name: Release Docker

# 触发条件
on:
  workflow_dispatch:
  push:
    branches:
      - 'dev/**'
      - 'release/**'
    tags:
      - 'v**'

env:
  #  仓库地址
  # Use docker.io for Docker Hub if empty
  REGISTRY: ${{ vars.REGISTRY }}
  # github.repository as <account>/<repo>
  #  {用户名}/{仓库名}
  IMAGE_NAME: ${{ github.repository }}
  BUILD_ENV: prod


jobs:
  build:
    # 运行环境
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta-image.outputs.tags }}
    # 运行步骤
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v3.0.0
        with:
          java-version: '17'
          distribution: 'adopt'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file
          cache: 'maven'

      # 设置环境变量
      - name: default prod
        run: echo "BUILD_ENV=prod" >> $GITHUB_ENV

      # 项目打包
      - name: Build with Maven
        run: mvn --batch-mode -P ${{ env.BUILD_ENV }} -B package --file pom.xml -s ${{ github.workspace }}/.github/workflows/maven-settings.xml -Dmaven.test.skip=true
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v1.6.0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0

      ############### tencentyun image ###############

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1.14.1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta-image
        uses: docker/metadata-action@v3.6.2
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: ${{ vars.DOCKER_FILE_CONTEXT }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-image.outputs.tags }}
          labels: ${{ steps.meta-image.outputs.labels }}
          build-args: |
            - BUILD_ENV=${{ env.BUILD_ENV }}

  deploy:
    needs: build

    # 运行环境
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    # 运行步骤
    steps:
      - uses: actions/checkout@v2
      # 部署服务器
      - name: deploy
        uses: appleboy/ssh-action@master
        # 传递给脚本的环境变量，不能用secrets
        env:
          IMAGE_NAME: ${{ needs.build.outputs.image-tag }}
          BUILD_ENV: ${{ env.BUILD_ENV }}
          DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
          DOCKER_PASSWORD_PATH: ${{ vars.DOCKER_PASSWORD_PATH }}
          DOCKER_RUN_ARGS: ${{ vars.DOCKER_RUN_ARGS }}
        with:
          host: ${{ vars.HOST }}
          port: ${{ secrets.PORT }}
          username: ${{ secrets.HOST_USERNAME }}
          envs: IMAGE_NAME,BUILD_ENV,DOCKER_USERNAME,DOCKER_PASSWORD_PATH,DOCKER_RUN_ARGS
          key: ${{ secrets.HOST_SSHKEY }}
          script: |
            echo "i=$IMAGE_NAME e=$BUILD_ENV u=$DOCKER_USERNAME p=DOCKER_PASSWORD_PATH s=$DOCKER_RUN_ARGS"
            if [[ -e "${{ github.repository_owner }}_docker_run.sh" ]] ;then
              echo "执行脚本已存在"
            else
              echo "执行脚本不存在，开始写入..."
              echo `apt install wget`
              echo `wget -O ${{ github.repository_owner }}_docker_run.sh ${{ vars.DEPLOY_SCRIPT }}`
            fi
            echo `sh ./${{ github.repository_owner }}_docker_run.sh -i $IMAGE_NAME -e $BUILD_ENV -u $DOCKER_USERNAME -p $DOCKER_PASSWORD_PATH -s $DOCKER_RUN_ARGS`
